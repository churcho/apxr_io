%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.2.1
-module(apxr_pb_project).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_RetirementReason/1, enum_value_by_symbol_RetirementReason/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'RetirementReason'() :: 'RETIRED_OTHER' | 'RETIRED_INVALID' | 'RETIRED_SECURITY' | 'RETIRED_DEPRECATED' | 'RETIRED_RENAMED'.
-export_type(['RetirementReason'/0]).

%% message types
-type 'Project'() ::
			#{releases                => ['Release'()]    % = 1
			 }.
-type 'Release'() ::
			#{version                 => iodata(),        % = 1
				checksum                => iodata()         % = 2
				%% retired              => 'RetirementStatus'() % = 3
			 }.
-type 'RetirementStatus'() ::
			#{reason                  => 'RETIRED_OTHER' | 'RETIRED_INVALID' | 'RETIRED_SECURITY' | 'RETIRED_DEPRECATED' | 'RETIRED_RENAMED' | integer() % = 1, enum RetirementReason
				%% message              => iodata()         % = 2
			 }.
-export_type(['Project'/0, 'Release'/0, 'RetirementStatus'/0]).

-spec encode_msg('Project'() | 'Release'() | 'RetirementStatus'(),'Project' | 'Release' | 'RetirementStatus') -> binary().
encode_msg(Msg, MsgName) ->
		encode_msg(Msg, MsgName, []).


-spec encode_msg('Project'() | 'Release'() | 'RetirementStatus'(),'Project' | 'Release' | 'RetirementStatus', list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
		verify_msg(Msg, MsgName, Opts),
		TrUserData = proplists:get_value(user_data, Opts),
		case MsgName of
			'Project' -> e_msg_Project(Msg, TrUserData);
			'Release' -> e_msg_Release(Msg, TrUserData);
			'RetirementStatus' ->
		e_msg_RetirementStatus(Msg, TrUserData)
		end.



e_msg_Project(Msg, TrUserData) ->
		e_msg_Project(Msg, <<>>, TrUserData).


e_msg_Project(#{} = M, Bin, TrUserData) ->
		case M of
			#{releases := F1} ->
		TrF1 = id(F1, TrUserData),
		if TrF1 == [] -> Bin;
			 true -> e_field_Project_releases(TrF1, Bin, TrUserData)
		end;
			_ -> Bin
		end.

e_msg_Release(Msg, TrUserData) ->
		e_msg_Release(Msg, <<>>, TrUserData).


e_msg_Release(#{version := F1, checksum := F2} = M, Bin,
				TrUserData) ->
		B1 = begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
		B2 = begin
		 TrF2 = id(F2, TrUserData),
		 e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
		case M of
			#{retired := F3} ->
		begin
			TrF3 = id(F3, TrUserData),
			e_mfield_Release_retired(TrF3, <<B2/binary, 26>>,
						 TrUserData)
		end;
			_ -> B2
		end.

e_msg_RetirementStatus(Msg, TrUserData) ->
		e_msg_RetirementStatus(Msg, <<>>, TrUserData).


e_msg_RetirementStatus(#{reason := F1} = M, Bin,
					 TrUserData) ->
		B1 = begin
		 TrF1 = id(F1, TrUserData),
		 e_enum_RetirementReason(TrF1, <<Bin/binary, 8>>)
	 end,
		case M of
			#{message := F2} ->
		begin
			TrF2 = id(F2, TrUserData),
			e_type_string(TrF2, <<B1/binary, 18>>)
		end;
			_ -> B1
		end.

e_mfield_Project_releases(Msg, Bin, TrUserData) ->
		SubBin = e_msg_Release(Msg, <<>>, TrUserData),
		Bin2 = e_varint(byte_size(SubBin), Bin),
		<<Bin2/binary, SubBin/binary>>.

e_field_Project_releases([Elem | Rest], Bin,
			 TrUserData) ->
		Bin2 = <<Bin/binary, 10>>,
		Bin3 = e_mfield_Project_releases(id(Elem, TrUserData),
						 Bin2, TrUserData),
		e_field_Project_releases(Rest, Bin3, TrUserData);
e_field_Project_releases([], Bin, _TrUserData) -> Bin.

e_mfield_Release_retired(Msg, Bin, TrUserData) ->
		SubBin = e_msg_RetirementStatus(Msg, <<>>, TrUserData),
		Bin2 = e_varint(byte_size(SubBin), Bin),
		<<Bin2/binary, SubBin/binary>>.

e_enum_RetirementReason('RETIRED_OTHER', Bin) ->
		<<Bin/binary, 0>>;
e_enum_RetirementReason('RETIRED_INVALID', Bin) ->
		<<Bin/binary, 1>>;
e_enum_RetirementReason('RETIRED_SECURITY', Bin) ->
		<<Bin/binary, 2>>;
e_enum_RetirementReason('RETIRED_DEPRECATED', Bin) ->
		<<Bin/binary, 3>>;
e_enum_RetirementReason('RETIRED_RENAMED', Bin) ->
		<<Bin/binary, 4>>;
e_enum_RetirementReason(V, Bin) -> e_varint(V, Bin).

e_type_string(S, Bin) ->
		Utf8 = unicode:characters_to_binary(S),
		Bin2 = e_varint(byte_size(Utf8), Bin),
		<<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
		Bin2 = e_varint(byte_size(Bytes), Bin),
		<<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
		BytesBin = iolist_to_binary(Bytes),
		Bin2 = e_varint(byte_size(BytesBin), Bin),
		<<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
		Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
		e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
		decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
		TrUserData = proplists:get_value(user_data, Opts),
		decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
		try decode_msg_2_doit(MsgName, Bin, TrUserData)
		catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
		end.
-else.
-ifdef('GPB_PATTERN_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
		try decode_msg_2_doit(MsgName, Bin, TrUserData)
		catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
		end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
		try decode_msg_2_doit(MsgName, Bin, TrUserData)
		catch Class:Reason ->
				StackTrace = erlang:get_stacktrace(),
				error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
		end.
-endif.

-endif.

decode_msg_2_doit('Project', Bin, TrUserData) ->
		d_msg_Project(Bin, TrUserData);
decode_msg_2_doit('Release', Bin, TrUserData) ->
		d_msg_Release(Bin, TrUserData);
decode_msg_2_doit('RetirementStatus', Bin,
			TrUserData) ->
		d_msg_RetirementStatus(Bin, TrUserData).



d_msg_Project(Bin, TrUserData) ->
		dfp_read_field_def_Project(Bin, 0, 0,
						 id([], TrUserData), TrUserData).

dfp_read_field_def_Project(<<10, Rest/binary>>, Z1, Z2,
				 F@_1, TrUserData) ->
		d_field_Project_releases(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_Project(<<>>, 0, 0, R1,
				 TrUserData) ->
		#{releases => lists_reverse(R1, TrUserData)};
dfp_read_field_def_Project(Other, Z1, Z2, F@_1,
				 TrUserData) ->
		dg_read_field_def_Project(Other, Z1, Z2, F@_1,
						TrUserData).

dg_read_field_def_Project(<<1:1, X:7, Rest/binary>>, N,
				Acc, F@_1, TrUserData)
		when N < 32 - 7 ->
		dg_read_field_def_Project(Rest, N + 7, X bsl N + Acc,
						F@_1, TrUserData);
dg_read_field_def_Project(<<0:1, X:7, Rest/binary>>, N,
				Acc, F@_1, TrUserData) ->
		Key = X bsl N + Acc,
		case Key of
			10 ->
		d_field_Project_releases(Rest, 0, 0, F@_1, TrUserData);
			_ ->
		case Key band 7 of
			0 -> skip_varint_Project(Rest, 0, 0, F@_1, TrUserData);
			1 -> skip_64_Project(Rest, 0, 0, F@_1, TrUserData);
			2 ->
		skip_length_delimited_Project(Rest, 0, 0, F@_1,
								TrUserData);
			3 ->
		skip_group_Project(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
			5 -> skip_32_Project(Rest, 0, 0, F@_1, TrUserData)
		end
		end;
dg_read_field_def_Project(<<>>, 0, 0, R1, TrUserData) ->
		#{releases => lists_reverse(R1, TrUserData)}.

d_field_Project_releases(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
		when N < 57 ->
		d_field_Project_releases(Rest, N + 7, X bsl N + Acc,
					 F@_1, TrUserData);
d_field_Project_releases(<<0:1, X:7, Rest/binary>>, N,
			 Acc, Prev, TrUserData) ->
		{NewFValue, RestF} = begin
				 Len = X bsl N + Acc,
				 <<Bs:Len/binary, Rest2/binary>> = Rest,
				 {id(d_msg_Release(Bs, TrUserData), TrUserData),
					Rest2}
			 end,
		dfp_read_field_def_Project(RestF, 0, 0,
						 cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Project(<<1:1, _:7, Rest/binary>>, Z1, Z2,
				F@_1, TrUserData) ->
		skip_varint_Project(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Project(<<0:1, _:7, Rest/binary>>, Z1, Z2,
				F@_1, TrUserData) ->
		dfp_read_field_def_Project(Rest, Z1, Z2, F@_1,
						 TrUserData).

skip_length_delimited_Project(<<1:1, X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
		when N < 57 ->
		skip_length_delimited_Project(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Project(<<0:1, X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
		Length = X bsl N + Acc,
		<<_:Length/binary, Rest2/binary>> = Rest,
		dfp_read_field_def_Project(Rest2, 0, 0, F@_1,
						 TrUserData).

skip_group_Project(Bin, FNum, Z2, F@_1, TrUserData) ->
		{_, Rest} = read_group(Bin, FNum),
		dfp_read_field_def_Project(Rest, 0, Z2, F@_1,
						 TrUserData).

skip_32_Project(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
		dfp_read_field_def_Project(Rest, Z1, Z2, F@_1,
						 TrUserData).

skip_64_Project(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
		dfp_read_field_def_Project(Rest, Z1, Z2, F@_1,
						 TrUserData).

d_msg_Release(Bin, TrUserData) ->
		dfp_read_field_def_Release(Bin, 0, 0,
						 id('$undef', TrUserData),
						 id('$undef', TrUserData),
						 id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Release(<<10, Rest/binary>>, Z1, Z2,
				 F@_1, F@_2, F@_3, TrUserData) ->
		d_field_Release_version(Rest, Z1, Z2, F@_1, F@_2, F@_3,
					TrUserData);
dfp_read_field_def_Release(<<18, Rest/binary>>, Z1, Z2,
				 F@_1, F@_2, F@_3, TrUserData) ->
		d_field_Release_checksum(Rest, Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData);
dfp_read_field_def_Release(<<26, Rest/binary>>, Z1, Z2,
				 F@_1, F@_2, F@_3, TrUserData) ->
		d_field_Release_retired(Rest, Z1, Z2, F@_1, F@_2, F@_3,
					TrUserData);
dfp_read_field_def_Release(<<>>, 0, 0, F@_1, F@_2, F@_3,
				 _) ->
		S1 = #{version => F@_1, checksum => F@_2},
		if F@_3 == '$undef' -> S1;
			 true -> S1#{retired => F@_3}
		end;
dfp_read_field_def_Release(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData) ->
		dg_read_field_def_Release(Other, Z1, Z2, F@_1, F@_2,
						F@_3, TrUserData).

dg_read_field_def_Release(<<1:1, X:7, Rest/binary>>, N,
				Acc, F@_1, F@_2, F@_3, TrUserData)
		when N < 32 - 7 ->
		dg_read_field_def_Release(Rest, N + 7, X bsl N + Acc,
						F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Release(<<0:1, X:7, Rest/binary>>, N,
				Acc, F@_1, F@_2, F@_3, TrUserData) ->
		Key = X bsl N + Acc,
		case Key of
			10 ->
		d_field_Release_version(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
			18 ->
		d_field_Release_checksum(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
			26 ->
		d_field_Release_retired(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
			_ ->
		case Key band 7 of
			0 ->
		skip_varint_Release(Rest, 0, 0, F@_1, F@_2, F@_3,
						TrUserData);
			1 ->
		skip_64_Release(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
			2 ->
		skip_length_delimited_Release(Rest, 0, 0, F@_1, F@_2,
								F@_3, TrUserData);
			3 ->
		skip_group_Release(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
					 TrUserData);
			5 ->
		skip_32_Release(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
		end
		end;
dg_read_field_def_Release(<<>>, 0, 0, F@_1, F@_2, F@_3,
				_) ->
		S1 = #{version => F@_1, checksum => F@_2},
		if F@_3 == '$undef' -> S1;
			 true -> S1#{retired => F@_3}
		end.

d_field_Release_version(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
		when N < 57 ->
		d_field_Release_version(Rest, N + 7, X bsl N + Acc,
					F@_1, F@_2, F@_3, TrUserData);
d_field_Release_version(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, TrUserData) ->
		{NewFValue, RestF} = begin
				 Len = X bsl N + Acc,
				 <<Bytes:Len/binary, Rest2/binary>> = Rest,
				 {binary:copy(Bytes), Rest2}
			 end,
		dfp_read_field_def_Release(RestF, 0, 0, NewFValue, F@_2,
						 F@_3, TrUserData).

d_field_Release_checksum(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
		when N < 57 ->
		d_field_Release_checksum(Rest, N + 7, X bsl N + Acc,
					 F@_1, F@_2, F@_3, TrUserData);
d_field_Release_checksum(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, TrUserData) ->
		{NewFValue, RestF} = begin
				 Len = X bsl N + Acc,
				 <<Bytes:Len/binary, Rest2/binary>> = Rest,
				 {binary:copy(Bytes), Rest2}
			 end,
		dfp_read_field_def_Release(RestF, 0, 0, F@_1, NewFValue,
						 F@_3, TrUserData).

d_field_Release_retired(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
		when N < 57 ->
		d_field_Release_retired(Rest, N + 7, X bsl N + Acc,
					F@_1, F@_2, F@_3, TrUserData);
d_field_Release_retired(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, Prev, TrUserData) ->
		{NewFValue, RestF} = begin
				 Len = X bsl N + Acc,
				 <<Bs:Len/binary, Rest2/binary>> = Rest,
				 {id(d_msg_RetirementStatus(Bs, TrUserData),
						 TrUserData),
					Rest2}
			 end,
		dfp_read_field_def_Release(RestF, 0, 0, F@_1, F@_2,
						 if Prev == '$undef' -> NewFValue;
					true ->
							merge_msg_RetirementStatus(Prev,
								 NewFValue,
								 TrUserData)
						 end,
						 TrUserData).

skip_varint_Release(<<1:1, _:7, Rest/binary>>, Z1, Z2,
				F@_1, F@_2, F@_3, TrUserData) ->
		skip_varint_Release(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_Release(<<0:1, _:7, Rest/binary>>, Z1, Z2,
				F@_1, F@_2, F@_3, TrUserData) ->
		dfp_read_field_def_Release(Rest, Z1, Z2, F@_1, F@_2,
						 F@_3, TrUserData).

skip_length_delimited_Release(<<1:1, X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, TrUserData)
		when N < 57 ->
		skip_length_delimited_Release(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Release(<<0:1, X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
		Length = X bsl N + Acc,
		<<_:Length/binary, Rest2/binary>> = Rest,
		dfp_read_field_def_Release(Rest2, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData).

skip_group_Release(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			 TrUserData) ->
		{_, Rest} = read_group(Bin, FNum),
		dfp_read_field_def_Release(Rest, 0, Z2, F@_1, F@_2,
						 F@_3, TrUserData).

skip_32_Release(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
		dfp_read_field_def_Release(Rest, Z1, Z2, F@_1, F@_2,
						 F@_3, TrUserData).

skip_64_Release(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
		dfp_read_field_def_Release(Rest, Z1, Z2, F@_1, F@_2,
						 F@_3, TrUserData).

d_msg_RetirementStatus(Bin, TrUserData) ->
		dfp_read_field_def_RetirementStatus(Bin, 0, 0,
					id('$undef', TrUserData),
					id('$undef', TrUserData), TrUserData).

dfp_read_field_def_RetirementStatus(<<8, Rest/binary>>,
						Z1, Z2, F@_1, F@_2, TrUserData) ->
		d_field_RetirementStatus_reason(Rest, Z1, Z2, F@_1,
						F@_2, TrUserData);
dfp_read_field_def_RetirementStatus(<<18, Rest/binary>>,
						Z1, Z2, F@_1, F@_2, TrUserData) ->
		d_field_RetirementStatus_message(Rest, Z1, Z2, F@_1,
						 F@_2, TrUserData);
dfp_read_field_def_RetirementStatus(<<>>, 0, 0, F@_1,
						F@_2, _) ->
		S1 = #{reason => F@_1},
		if F@_2 == '$undef' -> S1;
			 true -> S1#{message => F@_2}
		end;
dfp_read_field_def_RetirementStatus(Other, Z1, Z2, F@_1,
						F@_2, TrUserData) ->
		dg_read_field_def_RetirementStatus(Other, Z1, Z2, F@_1,
							 F@_2, TrUserData).

dg_read_field_def_RetirementStatus(<<1:1, X:7,
						 Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
		when N < 32 - 7 ->
		dg_read_field_def_RetirementStatus(Rest, N + 7,
							 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_RetirementStatus(<<0:1, X:7,
						 Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
		Key = X bsl N + Acc,
		case Key of
			8 ->
		d_field_RetirementStatus_reason(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
			18 ->
		d_field_RetirementStatus_message(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
			_ ->
		case Key band 7 of
			0 ->
		skip_varint_RetirementStatus(Rest, 0, 0, F@_1, F@_2,
							 TrUserData);
			1 ->
		skip_64_RetirementStatus(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
			2 ->
		skip_length_delimited_RetirementStatus(Rest, 0, 0, F@_1,
									 F@_2, TrUserData);
			3 ->
		skip_group_RetirementStatus(Rest, Key bsr 3, 0, F@_1,
							F@_2, TrUserData);
			5 ->
		skip_32_RetirementStatus(Rest, 0, 0, F@_1, F@_2,
					 TrUserData)
		end
		end;
dg_read_field_def_RetirementStatus(<<>>, 0, 0, F@_1,
					 F@_2, _) ->
		S1 = #{reason => F@_1},
		if F@_2 == '$undef' -> S1;
			 true -> S1#{message => F@_2}
		end.

d_field_RetirementStatus_reason(<<1:1, X:7,
					Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
		when N < 57 ->
		d_field_RetirementStatus_reason(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_RetirementStatus_reason(<<0:1, X:7,
					Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
		{NewFValue, RestF} = {d_enum_RetirementReason(begin
								<<Res:32/signed-native>> =
							<<(X bsl N +
									 Acc):32/unsigned-native>>,
								Res
							end),
				Rest},
		dfp_read_field_def_RetirementStatus(RestF, 0, 0,
					NewFValue, F@_2, TrUserData).

d_field_RetirementStatus_message(<<1:1, X:7,
					 Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
		when N < 57 ->
		d_field_RetirementStatus_message(Rest, N + 7,
						 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_RetirementStatus_message(<<0:1, X:7,
					 Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
		{NewFValue, RestF} = begin
				 Len = X bsl N + Acc,
				 <<Bytes:Len/binary, Rest2/binary>> = Rest,
				 {binary:copy(Bytes), Rest2}
			 end,
		dfp_read_field_def_RetirementStatus(RestF, 0, 0, F@_1,
					NewFValue, TrUserData).

skip_varint_RetirementStatus(<<1:1, _:7, Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
		skip_varint_RetirementStatus(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
skip_varint_RetirementStatus(<<0:1, _:7, Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
		dfp_read_field_def_RetirementStatus(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_length_delimited_RetirementStatus(<<1:1, X:7,
					 Rest/binary>>,
							 N, Acc, F@_1, F@_2, TrUserData)
		when N < 57 ->
		skip_length_delimited_RetirementStatus(Rest, N + 7,
						 X bsl N + Acc, F@_1, F@_2,
						 TrUserData);
skip_length_delimited_RetirementStatus(<<0:1, X:7,
					 Rest/binary>>,
							 N, Acc, F@_1, F@_2, TrUserData) ->
		Length = X bsl N + Acc,
		<<_:Length/binary, Rest2/binary>> = Rest,
		dfp_read_field_def_RetirementStatus(Rest2, 0, 0, F@_1,
					F@_2, TrUserData).

skip_group_RetirementStatus(Bin, FNum, Z2, F@_1, F@_2,
					TrUserData) ->
		{_, Rest} = read_group(Bin, FNum),
		dfp_read_field_def_RetirementStatus(Rest, 0, Z2, F@_1,
					F@_2, TrUserData).

skip_32_RetirementStatus(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
		dfp_read_field_def_RetirementStatus(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_64_RetirementStatus(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
		dfp_read_field_def_RetirementStatus(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

d_enum_RetirementReason(0) -> 'RETIRED_OTHER';
d_enum_RetirementReason(1) -> 'RETIRED_INVALID';
d_enum_RetirementReason(2) -> 'RETIRED_SECURITY';
d_enum_RetirementReason(3) -> 'RETIRED_DEPRECATED';
d_enum_RetirementReason(4) -> 'RETIRED_RENAMED';
d_enum_RetirementReason(V) -> V.

read_group(Bin, FieldNum) ->
		{NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
		<<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
		{Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
	when N < (32-7) ->
		read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
					FieldNum) ->
		Key = X bsl N + Acc,
		TagLen1 = TagLen + 1,
		case {Key bsr 3, Key band 7} of
				{FieldNum, 4} -> % 4 = group_end
						{NumBytes, TagLen1};
				{_, 0} -> % 0 = varint
						read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
				{_, 1} -> % 1 = bits64
						<<_:64, Tl2/binary>> = Tl,
						read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
				{_, 2} -> % 2 = length_delimited
						read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
				{_, 3} -> % 3 = group_start
						read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
				{_, 4} -> % 4 = group_end
						read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
				{_, 5} -> % 5 = bits32
						<<_:32, Tl2/binary>> = Tl,
						read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
		end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
	when N < (64-7) ->
		read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
		read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
	when N < (64-7) ->
		read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
		Len = X bsl N + Acc,
		NumBytes1 = NumBytes + 1,
		<<_:Len/binary, Tl2/binary>> = Tl,
		read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
		merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
		TrUserData = proplists:get_value(user_data, Opts),
		case MsgName of
			'Project' -> merge_msg_Project(Prev, New, TrUserData);
			'Release' -> merge_msg_Release(Prev, New, TrUserData);
			'RetirementStatus' ->
		merge_msg_RetirementStatus(Prev, New, TrUserData)
		end.

merge_msg_Project(PMsg, NMsg, TrUserData) ->
		S1 = #{},
		case {PMsg, NMsg} of
			{#{releases := PFreleases},
			 #{releases := NFreleases}} ->
		S1#{releases =>
			'erlang_++'(PFreleases, NFreleases, TrUserData)};
			{_, #{releases := NFreleases}} ->
		S1#{releases => NFreleases};
			{#{releases := PFreleases}, _} ->
		S1#{releases => PFreleases};
			{_, _} -> S1
		end.

merge_msg_Release(#{} = PMsg,
			#{version := NFversion, checksum := NFchecksum} = NMsg,
			TrUserData) ->
		S1 = #{version => NFversion, checksum => NFchecksum},
		case {PMsg, NMsg} of
			{#{retired := PFretired}, #{retired := NFretired}} ->
		S1#{retired =>
			merge_msg_RetirementStatus(PFretired, NFretired,
							 TrUserData)};
			{_, #{retired := NFretired}} ->
		S1#{retired => NFretired};
			{#{retired := PFretired}, _} ->
		S1#{retired => PFretired};
			{_, _} -> S1
		end.

merge_msg_RetirementStatus(#{} = PMsg,
				 #{reason := NFreason} = NMsg, _) ->
		S1 = #{reason => NFreason},
		case {PMsg, NMsg} of
			{_, #{message := NFmessage}} ->
		S1#{message => NFmessage};
			{#{message := PFmessage}, _} ->
		S1#{message => PFmessage};
			_ -> S1
		end.


verify_msg(Msg, MsgName) ->
		verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
		TrUserData = proplists:get_value(user_data, Opts),
		case MsgName of
			'Project' ->
		v_msg_Project(Msg, ['Project'], TrUserData);
			'Release' ->
		v_msg_Release(Msg, ['Release'], TrUserData);
			'RetirementStatus' ->
		v_msg_RetirementStatus(Msg, ['RetirementStatus'],
				 TrUserData);
			_ -> mk_type_error(not_a_known_message, Msg, [])
		end.


v_msg_Project(#{} = M, Path, TrUserData) ->
		case M of
			#{releases := F1} ->
		if is_list(F1) ->
		 _ = [v_msg_Release(Elem, [releases | Path], TrUserData)
					|| Elem <- F1],
		 ok;
			 true ->
		 mk_type_error({invalid_list_of, {msg, 'Release'}}, F1,
						 [releases | Path])
		end;
			_ -> ok
		end,
		lists:foreach(fun (releases) -> ok;
					(OtherKey) ->
				mk_type_error({extraneous_key, OtherKey}, M, Path)
			end,
			maps:keys(M)),
		ok;
v_msg_Project(M, Path, _TrUserData) when is_map(M) ->
		mk_type_error({missing_fields, [] -- maps:keys(M),
			 'Project'},
			M, Path);
v_msg_Project(X, Path, _TrUserData) ->
		mk_type_error({expected_msg, 'Project'}, X, Path).

v_msg_Release(#{version := F1, checksum := F2} = M,
				Path, TrUserData) ->
		v_type_string(F1, [version | Path]),
		v_type_bytes(F2, [checksum | Path]),
		case M of
			#{retired := F3} ->
		v_msg_RetirementStatus(F3, [retired | Path],
				 TrUserData);
			_ -> ok
		end,
		lists:foreach(fun (version) -> ok;
					(checksum) -> ok;
					(retired) -> ok;
					(OtherKey) ->
				mk_type_error({extraneous_key, OtherKey}, M, Path)
			end,
			maps:keys(M)),
		ok;
v_msg_Release(M, Path, _TrUserData) when is_map(M) ->
		mk_type_error({missing_fields,
			 [version, checksum] -- maps:keys(M), 'Release'},
			M, Path);
v_msg_Release(X, Path, _TrUserData) ->
		mk_type_error({expected_msg, 'Release'}, X, Path).

v_msg_RetirementStatus(#{reason := F1} = M, Path, _) ->
		v_enum_RetirementReason(F1, [reason | Path]),
		case M of
			#{message := F2} -> v_type_string(F2, [message | Path]);
			_ -> ok
		end,
		lists:foreach(fun (reason) -> ok;
					(message) -> ok;
					(OtherKey) ->
				mk_type_error({extraneous_key, OtherKey}, M, Path)
			end,
			maps:keys(M)),
		ok;
v_msg_RetirementStatus(M, Path, _TrUserData)
		when is_map(M) ->
		mk_type_error({missing_fields, [reason] -- maps:keys(M),
			 'RetirementStatus'},
			M, Path);
v_msg_RetirementStatus(X, Path, _TrUserData) ->
		mk_type_error({expected_msg, 'RetirementStatus'}, X,
			Path).

v_enum_RetirementReason('RETIRED_OTHER', _Path) -> ok;
v_enum_RetirementReason('RETIRED_INVALID', _Path) -> ok;
v_enum_RetirementReason('RETIRED_SECURITY', _Path) ->
		ok;
v_enum_RetirementReason('RETIRED_DEPRECATED', _Path) ->
		ok;
v_enum_RetirementReason('RETIRED_RENAMED', _Path) -> ok;
v_enum_RetirementReason(V, Path) when is_integer(V) ->
		v_type_sint32(V, Path);
v_enum_RetirementReason(X, Path) ->
		mk_type_error({invalid_enum, 'RetirementReason'}, X,
			Path).

v_type_sint32(N, _Path)
		when -2147483648 =< N, N =< 2147483647 ->
		ok;
v_type_sint32(N, Path) when is_integer(N) ->
		mk_type_error({value_out_of_range, sint32, signed, 32},
			N, Path);
v_type_sint32(X, Path) ->
		mk_type_error({bad_integer, sint32, signed, 32}, X,
			Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
		try unicode:characters_to_binary(S) of
			B when is_binary(B) -> ok;
			{error, _, _} ->
		mk_type_error(bad_unicode_string, S, Path)
		catch
			error:badarg ->
		mk_type_error(bad_unicode_string, S, Path)
		end;
v_type_string(X, Path) ->
		mk_type_error(bad_unicode_string, X, Path).

v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
		mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
		Path2 = prettify_path(Path),
		erlang:error({gpb_type_error,
			{Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
		list_to_atom(string:join(lists:map(fun atom_to_list/1,
							 lists:reverse(PathR)),
					 ".")).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
		[{{enum, 'RetirementReason'},
			[{'RETIRED_OTHER', 0}, {'RETIRED_INVALID', 1},
			 {'RETIRED_SECURITY', 2}, {'RETIRED_DEPRECATED', 3},
			 {'RETIRED_RENAMED', 4}]},
		 {{msg, 'Project'},
			[#{name => releases, fnum => 1, rnum => 2,
	 type => {msg, 'Release'}, occurrence => repeated,
	 opts => []}]},
		 {{msg, 'Release'},
			[#{name => version, fnum => 1, rnum => 2,
	 type => string, occurrence => required, opts => []},
			 #{name => checksum, fnum => 2, rnum => 3, type => bytes,
	 occurrence => required, opts => []},
			 #{name => retired, fnum => 3, rnum => 4,
	 type => {msg, 'RetirementStatus'},
	 occurrence => optional, opts => []}]},
		 {{msg, 'RetirementStatus'},
			[#{name => reason, fnum => 1, rnum => 2,
	 type => {enum, 'RetirementReason'},
	 occurrence => required, opts => []},
			 #{name => message, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
		['Project', 'Release', 'RetirementStatus'].


get_group_names() -> [].


get_msg_or_group_names() ->
		['Project', 'Release', 'RetirementStatus'].


get_enum_names() -> ['RetirementReason'].


fetch_msg_def(MsgName) ->
		case find_msg_def(MsgName) of
			Fs when is_list(Fs) -> Fs;
			error -> erlang:error({no_such_msg, MsgName})
		end.


fetch_enum_def(EnumName) ->
		case find_enum_def(EnumName) of
			Es when is_list(Es) -> Es;
			error -> erlang:error({no_such_enum, EnumName})
		end.


find_msg_def('Project') ->
		[#{name => releases, fnum => 1, rnum => 2,
			 type => {msg, 'Release'}, occurrence => repeated,
			 opts => []}];
find_msg_def('Release') ->
		[#{name => version, fnum => 1, rnum => 2,
			 type => string, occurrence => required, opts => []},
		 #{name => checksum, fnum => 2, rnum => 3, type => bytes,
			 occurrence => required, opts => []},
		 #{name => retired, fnum => 3, rnum => 4,
			 type => {msg, 'RetirementStatus'},
			 occurrence => optional, opts => []}];
find_msg_def('RetirementStatus') ->
		[#{name => reason, fnum => 1, rnum => 2,
			 type => {enum, 'RetirementReason'},
			 occurrence => required, opts => []},
		 #{name => message, fnum => 2, rnum => 3, type => string,
			 occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('RetirementReason') ->
		[{'RETIRED_OTHER', 0}, {'RETIRED_INVALID', 1},
		 {'RETIRED_SECURITY', 2}, {'RETIRED_DEPRECATED', 3},
		 {'RETIRED_RENAMED', 4}];
find_enum_def(_) -> error.


enum_symbol_by_value('RetirementReason', Value) ->
		enum_symbol_by_value_RetirementReason(Value).


enum_value_by_symbol('RetirementReason', Sym) ->
		enum_value_by_symbol_RetirementReason(Sym).


enum_symbol_by_value_RetirementReason(0) ->
		'RETIRED_OTHER';
enum_symbol_by_value_RetirementReason(1) ->
		'RETIRED_INVALID';
enum_symbol_by_value_RetirementReason(2) ->
		'RETIRED_SECURITY';
enum_symbol_by_value_RetirementReason(3) ->
		'RETIRED_DEPRECATED';
enum_symbol_by_value_RetirementReason(4) ->
		'RETIRED_RENAMED'.


enum_value_by_symbol_RetirementReason('RETIRED_OTHER') ->
		0;
enum_value_by_symbol_RetirementReason('RETIRED_INVALID') ->
		1;
enum_value_by_symbol_RetirementReason('RETIRED_SECURITY') ->
		2;
enum_value_by_symbol_RetirementReason('RETIRED_DEPRECATED') ->
		3;
enum_value_by_symbol_RetirementReason('RETIRED_RENAMED') ->
		4.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
		erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
		"4.2.1".

gpb_version_as_list() ->
		[4,2,1].
